// -*- C++ -*-
//
//  This file is part of Siena, a wide-area event notification system.
//  See http://www.cs.colorado.edu/serl/siena/
//
//  Author: Antonio Carzaniga <carzanig@cs.colorado.edu>
//  See the file AUTHORS for full details. 
//
//  Copyright (C) 1998-2002 University of Colorado
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
//  USA, or send email to serl@cs.colorado.edu.
//
//
// $Id: PThreads.icc,v 1.3 2002/11/22 20:57:45 carzanig Exp $
//
#include <pthread.h>
#include "PThreads.h"

inline int Thread::join(void) { return pthread_join(_t,NULL); }
inline void Thread::exit(void *s) { pthread_exit(s); }
inline int Thread::start(void) { return pthread_create(&_t,NULL,_run,this); }
#ifdef HAVE_PTHREAD_YIELD
inline int Thread::yield(void) { return pthread_yield(); }
#else
inline int Thread::yield(void) { return 0; }
#endif
inline int Thread::kill(int sig) { return pthread_kill(_t, sig); }

inline int Thread::block_signal(int sig) {
    sigset_t s; sigemptyset(&s); sigaddset(&s, sig);
    return pthread_sigmask(SIG_BLOCK, &s, NULL);
}

inline int Thread::unblock_signal(int sig) {
    sigset_t s; sigemptyset(&s); sigaddset(&s, sig);
    return pthread_sigmask(SIG_UNBLOCK, &s, NULL);
}

//
// inline methods for R/W Locks
//
#ifdef HAVE_PTHREAD_RWLOCK
inline Lock::Lock() { pthread_rwlock_init(&l, NULL); }
inline Lock::~Lock() { pthread_rwlock_destroy(&l); }
inline void Lock::wlock() { pthread_rwlock_wrlock(&l); }
inline void Lock::rlock() { pthread_rwlock_rdlock(&l); }
inline void Lock::unlock() { pthread_rwlock_unlock(&l); }

#else /* we don't have native r/w locks */

inline Lock::Lock(): status(0) { 
    pthread_cond_init(&rc, NULL);
    pthread_mutex_init(&rl, NULL);
}

inline Lock::~Lock() { 
    pthread_mutex_destroy(&rl);
    pthread_cond_destroy(&rc);
}

inline void Lock::wlock() 
{
    pthread_mutex_lock(&rl);
    while (status != 0)		// blocks if the lock is not free
	pthread_cond_wait(&rc, &rl);
    status = -1;
    pthread_mutex_unlock(&rl);
}

inline void Lock::rlock() 
{
    pthread_mutex_lock(&rl);
    while (status == -1) 	// blocks only if someone is writing
	pthread_cond_wait(&rc, &rl);
    ++status;
    pthread_mutex_unlock(&rl);
}

inline void Lock::unlock() 
{
    pthread_mutex_lock(&rl);
    if (status == -1) status = 0;
    else if (status > 0) --status;
    pthread_cond_signal(&rc);
    pthread_mutex_unlock(&rl);
}
#endif


//
// inline methods for Mutex
//
inline Mutex::Mutex() { pthread_mutex_init(&m, NULL); }
inline Mutex::~Mutex() { pthread_mutex_destroy(&m); }
inline void Mutex::lock() { pthread_mutex_lock(&m); }
inline void Mutex::unlock() { pthread_mutex_unlock(&m); }

//
// inline methods for Condition
//
inline Condition::Condition() { pthread_cond_init(&c, NULL); }
inline Condition::~Condition() { pthread_cond_destroy(&c); }
inline void Condition::wait(Mutex &m) { pthread_cond_wait(&c, &m.m); }
inline void Condition::signal() { pthread_cond_signal(&c); }
